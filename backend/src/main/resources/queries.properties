# USER ENTITY
user.insert=INSERT INTO "user" (first_name, last_name, second_name, password, email, date_of_birth, phone_number, role) \
  VALUES (:firstName, :lastName, :secondName, :password, :email, :dateOfBirth, :phoneNumber, :role.id) \
  ON CONFLICT (email) DO UPDATE SET first_name = :firstName, last_name = :lastName, second_name = :secondName, \
  password = :password, email = :email, date_of_birth = :dateOfBirth, phone_number = :phoneNumber, role = :role.id;
user.findAll=SELECT u.id, u.first_name, u.last_name, u.second_name, u.password, u.email, u.date_of_birth, u.phone_number, \
  u.role, r.name FROM "user" u INNER JOIN role r ON u.role = r.id WHERE NOT u.is_deactivated ORDER BY u.first_name, u.last_name LIMIT :limit OFFSET :offset;
user.findAllDeactivated=SELECT u.id, u.first_name, u.last_name, u.second_name, u.password, u.email, u.date_of_birth, u.phone_number, u.is_deactivated, u.date_of_deactivation, \
  u.role, r.name FROM "user" u INNER JOIN role r ON u.role = r.id WHERE u.is_deactivated ORDER BY u.first_name, u.last_name LIMIT :limit OFFSET :offset;
user.findOne=SELECT u.id, u.first_name, u.last_name, u.second_name, u.password, u.email, u.date_of_birth, u.phone_number, \
  u.role, r.name FROM "user" u INNER JOIN role r ON u.role = r.id WHERE u.id = :id
user.delete=UPDATE "user" SET is_deactivated = 'true' WHERE id = :id;
user.activate=UPDATE "user" SET is_deactivated = 'false' WHERE id = :id;
user.exists=SELECT COUNT(*) FROM "user" WHERE id = :id AND NOT is_deactivated;
user.findByEmail=SELECT u.id, u.first_name, u.last_name, u.second_name, u.password, u.email, u.date_of_birth, u.phone_number, \
  u.role, r.name FROM "user" u INNER JOIN role r ON u.role = r.id WHERE u.email = :email AND NOT u.is_deactivated;
user.findByRole=SELECT u.id, u.first_name, u.last_name, u.second_name, u.password, u.email, u.date_of_birth, u.phone_number, \
  u.role, r.name FROM "user" u INNER JOIN role r ON u.role = r.id WHERE u.role = :role AND NOT u.is_deactivated ORDER BY u.last_name, u.first_name LIMIT :limit OFFSET :offset;
user.count=SELECT COUNT(1) FROM "user" WHERE NOT is_deactivated;
user.deletedCount=SELECT COUNT(1) FROM "user" WHERE is_deactivated;
user.total=SELECT count("user".id) FROM "user";
user.search=SELECT u.id, u.first_name, u.last_name, u.second_name, u.password, u.email, u.date_of_birth, u.phone_number, u.role, u.date_of_deactivation, r.name FROM "user" u INNER JOIN role r ON u.role = r.id
user.findAllChatFriends=SELECT count(m.sender_id), u.id, first_name, last_name, u.role, r.name, u.password, u.email, u.date_of_birth, u.phone_number, u.second_name FROM "user" u \
  JOIN role r ON u.role = r.id \
  JOIN message m ON m.recipient_id = u.id \
  WHERE (m.recipient_id = :userId OR m.sender_id = :userId) AND u.id != :userId \
  GROUP BY first_name, last_name, r.name, u.role, u.password, u.email, u.date_of_birth, u.phone_number, u.id, u.second_name;
user.findUsersWithUnreadMessagesQuery=SELECT count(m.read) as phone_number, u.id, first_name, last_name, u.role, r.name, u.password, u.email, u.date_of_birth, u.phone_number, u.second_name \
  FROM "user" u \
  JOIN role r ON u.role = r.id \
  JOIN message m ON m.recipient_id = u.id OR m.sender_id = u.id \
  WHERE m.recipient_id = :userId AND m.read = FALSE AND u.id != :userId \
  GROUP BY first_name, last_name, r.name, u.role, u.password, u.email, u.date_of_birth, u.phone_number, u.id, u.second_name;
# REQUEST ENTITY
request.insert=INSERT INTO request (title, description, priority_status_id, progress_status_id, reporter_id, assignee_id, estimate_time_in_days, date_of_creation, parent_id, last_changer_id) \
  VALUES (:title, :description, :priorityStatus.id, :progressStatus.id, :reporter.id, :assignee.id, :estimateTimeInDays, :dateOfCreation, :parentId, :lastChanger.id) \
  ON CONFLICT (reporter_id, date_of_creation) DO UPDATE SET title = :title, description = :description, priority_status_id = :priorityStatus.id, \
  progress_status_id = :progressStatus.id, reporter_id = :reporter.id, assignee_id = :assignee.id, \
  estimate_time_in_days = :estimateTimeInDays, date_of_creation = :dateOfCreation, parent_id = :parentId, last_changer_id = :lastChanger.id;
request.select=SELECT r.id, r.title, r.description, r.parent_id, r.estimate_time_in_days , r.date_of_creation, \
  priority.id priority_id, priority.name priority_name, priority.value priority_value, progress.id progress_id, progress.name progress_name, progress.value progress_value, \
  reporter.id reporter_id, reporter.first_name reporter_first_name, reporter.last_name reporter_last_name, reporter.email reporter_email, \
  assignee.id assignee_id, assignee.first_name assignee_first_name, assignee.last_name assignee_last_name, assignee.email assignee_email, \
  last_changer.id last_changer_id, last_changer.first_name last_changer_first_name, last_changer.last_name last_changer_last_name \
  FROM request r \
  LEFT JOIN priority_status priority ON r.priority_status_id = priority.id \
  LEFT JOIN progress_status progress ON r.progress_status_id = progress.id \
  LEFT JOIN "user" reporter ON r.reporter_id = reporter.id \
  LEFT JOIN "user" assignee ON r.assignee_id = assignee.id \
  LEFT JOIN "user" last_changer ON r.last_changer_id = last_changer.id
request.fetchPage=\n WHERE r.parent_id IS NULL ORDER BY r.date_of_creation DESC LIMIT :limit OFFSET :offset;
request.delete=DELETE FROM request WHERE id = :id;
request.exists=SELECT COUNT(*) FROM request WHERE id = :id;
request.findOne=\nWHERE r.id = :id;
request.findSubRequests=\nWHERE r.progress_status_id IS NULL AND r.priority_status_id IS NULL AND r.parent_id = :id ;
request.findJoinedRequests=\nWHERE progress.name = 'Joined' AND r.parent_id = :id;
request.findByAssignee=\nWHERE r.assignee_id = :assigneeId AND progress.name != 'Joined' ORDER BY r.date_of_creation DESC LIMIT :limit OFFSET :offset;
request.findRequestsWithGivenProgressByAssignee=\nWHERE r.assignee_id = :assigneeId AND r.progress_status_id = :progressId ORDER BY r.date_of_creation DESC LIMIT :limit OFFSET :offset;
request.findByReporter=\nWHERE r.reporter_id = :reporterId ORDER BY r.date_of_creation DESC LIMIT :limit OFFSET :offset;
request.findByReporterAndProgress=\n WHERE r.reporter_id = :reporterId and progress.id = :progress ORDER BY r.date_of_creation DESC LIMIT :limit OFFSET :offset;
request.countByReporter=SELECT count(1) FROM request r  WHERE r.reporter_id = :reporterId;
request.countByAssignee=SELECT count(1) FROM request r  WHERE r.assignee_id = :assigneeId;
request.countRequestsWithGivenProgressByAssignee=SELECT count(1) FROM request r  WHERE r.assignee_id = :assigneeId AND r.progress_status_id = :progressStatusId;
request.countByReporterAndProgress= SELECT count(1) FROM request r \
  INNER JOIN progress_status progress ON r.progress_status_id = progress.id \
  WHERE r.reporter_id = :reporterId and progress.id = :progress_id and r.parent_id IS NULL;
request.findByPeriod=\nWHERE r.date_of_creation BETWEEN :begin AND :end ORDER BY u.last_name, u.first_name LIMIT :limit OFFSET :offset;
request.findByPriority=\nWHERE r.priority_status_id = :priority_status_id ORDER BY u.last_name, u.first_name LIMIT :limit OFFSET :offset;
request.findFree=\nWHERE parent_id IS NULL AND r.progress_status_id = 5 AND r.assignee_id IS NULL ORDER BY reporter.last_name, reporter.first_name LIMIT :limit OFFSET :offset;
request.count=SELECT COUNT(1) FROM request where parent_id is null;
request.countByProgressStatusForUser=SELECT count(progress_status_id) FROM request WHERE reporter_id = :userId AND progress_status_id = :progress;
request.countStatisticForForUser=SELECT count(progress_status_id) FROM request WHERE date_of_creation BETWEEN :howLong AND current_date + 1 AND progress_status_id != 8 AND request.reporter_id = :userId;
request.countStatisticForUserClosed=SELECT count(progress_status_id) FROM request WHERE date_of_creation BETWEEN :howLong AND current_date + 1 AND progress_status_id = :progress AND request.reporter_id = :userId;
request.countStatisticForAdminDashBoardByProgressStatus=SELECT count(request.id) FROM request WHERE date_of_creation BETWEEN :howLong AND current_date + 1 AND progress_status_id = :progress;
request.countStatisticForAdminDashBoardNotClosed=SELECT count(request.id) FROM request WHERE date_of_creation BETWEEN :howLong AND current_date + 1 AND progress_status_id !=8;
request.countStatisticForAdminDashBoardByPriorityStatus=SELECT count(request.id) FROM request WHERE date_of_creation BETWEEN :howLong AND current_date + 1 AND priority_status_id = :priority;
request.total=SELECT count(request.id) FROM request;
request.today=SELECT count(request.id) FROM request WHERE date_of_creation BETWEEN current_date AND current_date + 1;
request.runningToday=SELECT count(request.id) FROM request WHERE progress_status_id !=8 AND progress_status_id !=5 AND date_of_creation BETWEEN current_date AND current_date + 1;
request.countFree=SELECT count(1) FROM request WHERE parent_id IS NULL AND request.progress_status_id = 5 AND request.assignee_id IS NULL ;
request.byDate=\ WHERE date = :date;
request.findRequestsByIds=\nWHERE r.id IN (:ids)
request.countByStatusAndPeriod=SELECT count(r.id) AS count FROM request r \
   WHERE r.date_of_creation BETWEEN :begin AND :end AND r.progress_status_id = :progress_status_id;
request.countByStatusesAndPeriods=SELECT count(r.id) AS count, EXTRACT(YEAR FROM r.date_of_creation) AS year, EXTRACT(MONTH FROM r.date_of_creation) AS month FROM request r \
   WHERE r.date_of_creation BETWEEN :begin AND :end AND r.progress_status_id = :progress_status_id \
   GROUP BY year, month ORDER BY year, month;
request.bestManagersByPeriod=SELECT count(r.id) AS count, u.first_name, u.last_name \
  FROM request r INNER JOIN "user" u ON r.assignee_id = u.id \
  WHERE r.date_of_creation BETWEEN :begin AND :end AND r.progress_status_id = :progress_status_id \
  GROUP BY u.first_name, u.last_name ORDER BY count(r.id) DESC LIMIT :top;
request.countByManagerAndPeriod=SELECT count(r.id) AS count FROM request r \
   WHERE r.date_of_creation BETWEEN :begin AND :end AND r.progress_status_id = :progress_status_id AND r.assignee_id = :assignee_id;
request.countByManagerAndPeriods=SELECT count(r.id) AS count, EXTRACT(YEAR FROM r.date_of_creation) AS year, EXTRACT(MONTH FROM r.date_of_creation) AS month FROM request r \
   WHERE r.date_of_creation BETWEEN :begin AND :end AND r.progress_status_id = :progress_status_id AND r.assignee_id = :assignee_id \
   GROUP BY year, month ORDER BY year, month;
request.findRequestsByProgressStatusAndReporterId=\nWHERE r.reporter_id = :reporterId AND r.progress_status_id IN (:progress_status_ids);
request.deleteParentRequestIfHasNoChildren=DELETE FROM request AS parent WHERE parent.id = :id AND NOT EXISTS \
  (SELECT * FROM request AS child WHERE child.parent_id = parent.id)
# PRIORITY STATUS ENTITY
priorityStatus.insert=INSERT INTO priority_status (name, value) VALUES (:name, :value) ON CONFLICT (name) DO UPDATE SET value = :value;
priorityStatus.delete=DELETE FROM priority_status ps WHERE ps.id = :id;
priorityStatus.exists=SELECT COUNT(*) FROM priority_status WHERE id = :id;
priorityStatus.findOne=SELECT * FROM priority_status ps WHERE ps.id = :id;
priorityStatus.findAll=SELECT * FROM priority_status ORDER BY id;
priorityStatus.findByName=SELECT * FROM priority_status ps WHERE ps.name = :name;
priorityStatus.count=SELECT COUNT(1) FROM priority_status;
# PROGRESS STATUS ENTITY
progressStatus.insert=INSERT INTO progress_status (name, value) VALUES (:name, :value) ON CONFLICT (name) DO UPDATE SET value = :value;
progressStatus.delete=DELETE FROM progress_status ps WHERE ps.id = :id;
progressStatus.exists=SELECT COUNT(*) FROM progress_status WHERE id = :id;
progressStatus.findOne=SELECT * FROM progress_status ps WHERE ps.id = :id;
#progressStatus.findAll=SELECT * FROM progress_status ORDER BY id;
#progressStatus.findByName=SELECT * FROM progress_status ps WHERE ps.name = :name;
progressStatus.count=SELECT COUNT(1) FROM progress_status;
# ROLE STATUS ENTITY
role.insert=INSERT INTO role (name) VALUES (:name) ON CONFLICT (name) DO NOTHING;
role.delete=DELETE FROM role r WHERE r.id = :id;
role.exists=SELECT COUNT(*) FROM role WHERE id = :id;
role.findOne=SELECT * FROM role r WHERE r.id = :id;
role.findAll=SELECT * FROM role ORDER BY id;
role.findByName=SELECT * FROM role r WHERE r.name = :name;
role.count=SELECT COUNT(1) FROM role;
# TOPIC ENTITY
topic.findOne=SELECT t.id topic_id, t.title, t.description, r.name, r.id role_id \
  FROM topic as t \
  JOIN topic_to_role ON t.id = topic_to_role.topic_id \
  JOIN role r ON r.id = topic_to_role.role_id \
  WHERE t.id = :id;
topic.insert=INSERT INTO topic (title, description) \
  VALUES (:title, :description) \
  ON CONFLICT (title) DO UPDATE SET title = :title, description = :description;
topic.delete=DELETE FROM topic t \
  WHERE t.id = :id;
topic.exists_by_id=SELECT COUNT(*) \
  FROM topic \
  WHERE id = :id;
topic.exists_by_title=SELECT COUNT(*) \
  FROM topic \
  WHERE title = :title;
topic.count=SELECT COUNT(1) \
  FROM topic;
topic.findAll=SELECT topic.id topic_id, topic.title, topic.description, role.name, role.id role_id \
  FROM topic \
  LEFT JOIN topic_to_role ON topic.id = topic_to_role.topic_id \
  LEFT JOIN role ON role.id = topic_to_role.role_id
topic.findUserTopics=SELECT topic.id topic_id, topic.title, topic.description, role.name, role.id role_id \
  FROM topic \
  LEFT JOIN message ON topic.id = message.topic_id \
  LEFT JOIN topic_to_role ON topic.id = topic_to_role.topic_id \
  LEFT JOIN role ON role.id = topic_to_role.role_id \
  WHERE message.sender_id = :userId;
topic.fetchPage=\n ORDER BY topic.title LIMIT :limit OFFSET :offset;
topic.saveTopicMessage=INSERT INTO message(sender_id, topic_id, text, date_and_time) \
  VALUES (:senderId, :topicId, :text, :dateAndTime);
# TOPIC TO ROLE
topic_to_role.insert=INSERT INTO topic_to_role (role_id, topic_id) \
  VALUES (:role_id, :topic_id) \
  ;
topic_to_role.delete_all_by_topic_id=DELETE FROM topic_to_role t \
  WHERE t.topic_id = :topic_id;
# MESSAGE RECIPIENTS
user.managers=SELECT DISTINCT  manager.id, manager.password, manager.first_name, manager.last_name, manager.email,  manager.role, r.name, manager.second_name, manager.date_of_birth, manager.phone_number \
 FROM request \
    INNER JOIN "user" as manager ON request.assignee_id = manager.id \
    INNER JOIN role r ON manager.role = r.id \
 WHERE reporter_id = :reporter;
manager.users=SELECT DISTINCT employee.id, employee.first_name, employee.password, employee.last_name, employee.email, employee.role, r.name, employee.second_name, employee.date_of_birth, employee.phone_number \
  FROM request \
    INNER JOIN "user" as employee ON request.reporter_id = employee.id \
    INNER JOIN role r ON employee.role = r.id \
WHERE assignee_id = :assignee;
# MESSAGE QUERY
message.insert=INSERT INTO message(sender_id, recipient_id, text, date_and_time, read) \
  VALUES (:sender.id, :recipient.id, :text, :dateAndTime, :read) \
  ON CONFLICT (sender_id, date_and_time) DO UPDATE SET sender_id = :sender.id, recipient_id = :recipient.id, text = :text, date_and_time = :dateAndTime, read = :read;
#message.insertIntoTopic=INSERT INTO message(sender_id, topic_id, text, date_and_time) \
#  VALUES (:senderId, :topicId, :text, :dateAndTime);
message.findAll=SELECT m.id, m.sender_id, m.recipient_id, m.text, m.date_and_time, sender.first_name sender_first_name,sender.last_name sender_last_name, sender.email sender_email  \
  FROM message as m \
  INNER JOIN "user" as sender ON sender.id = m.sender_id  \
  LEFT JOIN "user" as recipient ON m.recipient_id = recipient.id ORDER BY m.date_and_time DESC LIMIT :limit OFFSET :offset;
message.findOne=SELECT m.id, m.sender_id, m.recipient_id, m.text, m.date_and_time, sender.first_name sender_first_name,sender.last_name sender_last_name  FROM message as m \
  INNER JOIN "user" as sender ON sender.id = m.sender_id  \
  LEFT JOIN "user" as recipient ON m.recipient_id = recipient.id WHERE m.id = :id;
message.findByRecipient= \n WHERE m.recipient_id = :recipient ORDER BY m.date_and_time DESC LIMIT :limit OFFSET :offset;
message.count=SELECT count(1) FROM message;
message.countByRecipient=SELECT count(1) \
  FROM message \
  WHERE recipient_id = :recipient;
message.select=SELECT r.name, m.id, m.sender_id, m.recipient_id, m.text, m.date_and_time, sender.first_name sender_first_name, sender.last_name sender_last_name, sender.email sender_email \
  FROM message as m \
  INNER JOIN "user" as sender ON sender.id = m.sender_id \
  INNER JOIN role as r ON sender.role=r.id
message.getByTopicQuery=\nWHERE m.topic_id = :topicId \
  ORDER BY m.date_and_time;
message.delete=DELETE FROM message WHERE id = :id;
message.getByFriendQuery=SELECT m.id, m.sender_id, m.recipient_id, m.text, m.date_and_time, m.read, sender.first_name sender_first_name, sender.email sender_email, recipient.first_name recipient_first_name, recipient.email recipient_email FROM message AS m \
  INNER JOIN "user" AS sender ON sender.id = m.sender_id \
  INNER JOIN "user" AS recipient ON recipient.id = m.recipient_id \
  WHERE m.sender_id = :senderId AND m.recipient_id = :recipientId OR m.sender_id = :recipientId AND m.recipient_id = :senderId \
  ORDER BY m.date_and_time;
message.getUnreadMessagesQuery=SELECT m.id, m.sender_id, m.recipient_id, m.text, m.date_and_time, m.read, sender.first_name sender_first_name, sender.email sender_email, recipient.first_name recipient_first_name, recipient.email recipient_email FROM message AS m \
  INNER JOIN "user" AS sender ON sender.id = m.sender_id \
  INNER JOIN "user" AS recipient ON recipient.id = m.recipient_id \
  WHERE m.recipient_id = :recipientId AND m.topic_id IS NULL AND m.read = FALSE AND sender.id != :recipientId \
  ORDER BY m.date_and_time;
# HISTORY ENTITY
history.findAllForEntity=SELECT h.id, h.column_name, h.old_value, h.new_value, h.demonstration_of_old_value, h.demonstration_of_new_value, h.date_of_change, h.record_id, h.changer_id, changer.first_name changer_first_name, changer.last_name changer_last_name \
  FROM history h \
  LEFT JOIN "user" as changer ON h.changer_id = changer.id \
  WHERE h.record_id = :entity_id \
  ORDER BY h.date_of_change DESC;
# DEADLINE INFO ENTITY
deadlines.getByAssignee=SELECT request.id, request.title, MAX(history.date_of_change) :: DATE AS date,\
request.estimate_time_in_days AS estimate FROM request INNER JOIN history ON request.id = history.record_id \
GROUP BY request.id HAVING request.assignee_id = :assignee_id AND progress_status_id = 7 \
UNION SELECT request.id, request.title, request.date_of_creation :: DATE AS date, \
request.estimate_time_in_days AS estimate \
FROM request WHERE id IN (SELECT DISTINCT parent_id FROM request WHERE parent_id NOTNULL) \
AND request.assignee_id = :assignee_id AND request.reporter_id = :assignee_id;

#REQUEST_SUBSCRIBERS
request.subscribe=INSERT INTO request_subscriber (request_id, subscriber_id) VALUES (:requestId, :subscriberId);
request.subscriber.exists=SELECT count(id) FROM request_subscriber WHERE request_id = :requestId and subscriber_id = :subscriberId;
request.unsubscribe=DELETE FROM request_subscriber WHERE request_id = :requestId and subscriber_id = :subscriberId;
request.subscribers=SELECT request_id, subscriber_id, subscriber.first_name first_name, subscriber.last_name last_name,\
subscriber.email email, subscriber.id subscriber_id \
FROM request_subscriber \
INNER JOIN "user" as subscriber ON subscriber.id = subscriber_id \
WHERE request_id = :requestId;

# COMMENT QUERY
comment.insert=INSERT INTO comment(sender_id, request_id, text, create_date_and_time, update_date_and_time) \
  VALUES (:sender.id, :request.id, :text, :createDateAndTime, :updateDateAndTime) \
  ON CONFLICT (create_date_and_time, sender_id) DO UPDATE SET sender_id = :sender.id, request_id = :request.id, text = :text, create_date_and_time = :createDateAndTime, update_date_and_time = :updateDateAndTime;
comment.findAll=SELECT c.id, c.sender_id, c.request_id, c.text, c.create_date_and_time, c.update_date_and_time, sender.first_name sender_first_name,sender.last_name sender_last_name, sender.email sender_email  \
  FROM comment as c \
  INNER JOIN "user" as sender ON sender.id = m.sender_id  \
  INNER JOIN "request" as request ON m.request_id = request.id \
  ORDER BY c.date_and_time DESC LIMIT :limit OFFSET :offset;
comment.findOne=SELECT m.id, m.sender_id, m.recipient_id, m.text, m.date_and_time, sender.first_name sender_first_name,sender.last_name sender_last_name  FROM message as m \
  INNER JOIN "user" as sender ON sender.id = m.sender_id  \
  LEFT JOIN "user" as recipient ON m.recipient_id = recipient.id WHERE m.id = :id;
comment.count=SELECT count(1) FROM comment;
comment.select=SELECT c.id, c.sender_id, c.request_id, c.text, c.create_date_and_time, c.update_date_and_time, sender.first_name sender_first_name, sender.last_name sender_last_name, sender.email sender_email, role.name \
  FROM comment as c \
  INNER JOIN "user" as sender ON sender.id = c.sender_id \
  INNER JOIN "role" as role ON sender.role = role.id \
  INNER JOIN "request" as request ON c.request_id = request.id
comment.delete=DELETE FROM comment WHERE id = :id;
comment.getByRequestQuery=\nWHERE c.request_id = :requestId